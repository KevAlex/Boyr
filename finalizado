/**
 *
 * @author kevin
 */
import java.util.*;

public class Atras {

    public static void main(String args[]) {

        Atras bm = new Atras();
        String texto = "pcaros de lateleletal caros vala caros amo ";
        String comando = "caros";

        char patron[] = new char[texto.length()];
        patron = texto.toCharArray();
        //System.out.printf("%s%n", bm.search(text, pattern));                  
        List<Integer> res = new ArrayList<Integer>();
        res = bm.busqueda(texto, comando);                                         // esta funcion retorna desde que letra empieza el patron
        int q, j;
        //System.out.println(res.get(0) + " " + res.get(1) + " tama√±o " + res.size());
        System.out.println("Numero de veces que aparece la palabra en el texto " + res.size());
        for (int i = 0; i < texto.length(); i++) {

            for (int k = 0; k < res.size(); k++) {

                if (i == res.get(k)) {
                    q = res.get(k);
                    for (j = 0; j < comando.length(); j++) {
                        System.out.print((char) 27 + "[30;34m" + patron[q + j]);
                    }
                    i = q + (j);
                }
            }
            System.out.print((char) 27 + "[30;30m" + patron[i]);

        }
        System.out.println("");
        String e = "";
        String[] m = texto.split(" ");
        System.out.println("Palabras palindromas en el texto");
        int no=0;
        for (int p = 0; p < m.length; p++) {
            
            for (int a = m[p].length() - 1; a >= 0; a--) {
                e = e + m[p].charAt(a);
            }
            if (e.equals(m[p])) {
                 System.out.print((char) 27 + "[30;31m" +" " +e);
//                System.out.print(" "+e);
                p++;
                no++;
            }
            e = "";
            if(p<m.length){
                System.out.print((char) 27 + "[30;30m" + " " +m[p]);
            }
        }
        System.out.println("");
        System.out.println((char) 27 + "[30;30m" + "Numero de palindromos " + no);

    }
    public static final int abcd = 256;
    private int[] bmBC;
    private int[] bmGs;
    public int comparisons;

    public void corrimiento(char[] x) {
        int m = x.length;
        bmBC = new int[abcd];
        Arrays.fill(bmBC, m);
        for (int i = 0; i < m - 1; i++) {
            bmBC[x[i]] = m - i - 1;     
        }
    }

    public int[] sufijo(char[] x) {
        int m = x.length;
        int suff[] = new int[m];
        int g = m - 1;
        int f = m - 1;
        suff[m - 1] = m;
        for (int i = m - 2; i >= 0; --i) {
            if (i > g && (i + m - 1 - f) < m && suff[i + m - 1 - f] < i - g) {
                suff[i] = suff[i + m - 1 - f];
                
            } else {
                g = i;
                f = g;
                while (g >= 0 && x[g] == x[m - 1]) {
                    --g;
                }
                suff[i] = f - g;
            }
        }
        
        
        return suff;
    }

    public void pBusqueda(char[] x) {
        int m = x.length;
        bmGs = new int[m];
        int suf[] = sufijo(x);
        Arrays.fill(bmGs, m);
        int j = 0;
        for (int i = m - 1; i >= -1; --i) {
            if (i == -1 || suf[i] == i + 1) {
                for (; j < m - 1 - i; ++j) {
                    if (bmGs[j] == m) {
                        bmGs[j] = m - 1 - i;
                    }
                }
            }
        }
        for (int i = 0; i < m - 1; i++) {
            bmGs[m - 1 - suf[i]] = m - 1 - i;
//            System.out.println("de "+ bmGs[m - 1 - suf[i]]);                    // valores del badmatchtable

        }
    }

    public List<Integer> busqueda(String texto, String pat) {
        char[] y = texto.toCharArray();
        char[] x = pat.toCharArray();
        int n = y.length; 
        int m = x.length; 
        List<Integer> posicion = new ArrayList<Integer>();
        int j = 0;
        int i = 0;

        /* Precompute */
        corrimiento(x);
        pBusqueda(x);

        /* Searching */
        while (j <= n - m) {
            for (i = m - 1; i >= 0 && x[i] == y[i + j]; i--) {
            }
            if (i < 0) {
                posicion.add(j);
                j += bmGs[0];
            } else {
                j += Math.max(bmGs[i], bmBC[y[i + j]] - m + 1 + i);             // compara los valores de los indices y se obtiene el mayor
            }
        }
        return posicion;

    }
}


